#!/usr/bin/env bash
# shellcheck disable=SC1090
# spell-checker: disable
###################################################################################
# exports: CONFIG_DIR, AUTH_FILE, CERT, NETNS_NAME, WG_LINK, SCRIPTS_DIR, PIA_PF
#          DEBUG, SERVER_ID
###################################################################################

set -eE
failure() {
  local lineno=$1; local msg=$2
  echo "$(basename "$0"): failed at $lineno: $msg"
}
trap 'failure ${LINENO} "$BASH_COMMAND"' ERR

############### FUNCTIONS ###############
# Checks if the required tools have been installed
function check_tool() {
  local cmd=$1; local package=$2
  if ! command -v "$cmd" &>/dev/null; then
    >&2 echo "$cmd could not be found"; echo "Please install $package"; exit 1
  fi
}

# Prints the help message
function print_help() {
  printf "Connects to a Private VPN server\n\n"
  printf "Usage: vpn [OPTIONS] [SERVER] [FLAGS]\n"
  printf "OPTIONS have to come before SERVER. FLAGS can be passed anywhere.\n"
  printf "It reads the username and password, for vpn authentication, from %s\n\n" "$AUTH"
  printf "OPTIONS:\n"
  printf "  %-7s   Connects to the specified server (or default one) with port forwarding if supported\n" "start"
  printf "  %-7s   Disconnects VPN\n" "stop"
  printf "  %-7s   (default) Check if VPN is connected\n" "status"
  printf "SERVER:\n"
  printf "  %-7s   (default) CA Vancouver\n" "van"
  printf "  %-7s   CA Ontario\n" "ont"
  printf "  %-7s   CA Montreal\n" "mtl"
  printf "  %-7s   CA Toronto\n" "tor"
  printf "  %-7s   DE Berlin\n" "ber"
  printf "  %-7s   DE Frankfurt\n" "frk"
  printf "  %-7s   France\n" "fra"
  printf "  %-7s   US Seattle\n" "sea"
  printf "FLAGS:\n"
  printf "  %-7s   Connects WITHOUT port forwarding\n" "-n"
  printf "  %-7s   Verbose output\n" "-v"
}

# Stops the VPN
function vpn_stop() {
  # Stop Transmission first
  $_TRANSMISSION_STOP_SCRIPT || exit 10

  # Remove port binding script
  crontab -l | grep -v "$_BIND_SCRIPT" | crontab -u root -
  killall socat > /dev/null 2>&1 || true

  if ip -n "$NETNS_NAME" link show "$WG_LINK" > /dev/null 2>&1; then
    # Delete the namespace
    ip netns delete "$NETNS_NAME" > /dev/null 2>&1

    # Delete the DNS
    resolvconf -d "$WG_LINK" > /dev/null 2>&1
    echo "VPN disconnected"
  else
    echo "Nothing to stop"
  fi
}

function vpn_start() {
  local ip_public; local ip_vpn; local count
  # Check if we should stop any existing connections
  if ip -n "$NETNS_NAME" link show "$WG_LINK" > /dev/null 2>&1; then
    read -r -n 1 -p "Do you want to stop the current connection before starting a new one? [Y/n] " stop
    if [[ -n $stop ]]; then printf "\n"; fi # prints an empty line only when non-empty input
    stop=${stop:-y} # if empty, replace with 'y'
    if [[ $stop == "y" ]]; then vpn_stop; else exit 0; fi
  fi

  ip_public=$(get_ip) # Get IP before VPN
  if [[ $DEBUG == true ]]; then echo "IP before VPN: $ip_public"; fi
  ip_vpn="$ip_public" # Initiate the variable for while loop

  # ---- CONNECTING CODE: START ---- #
  if [[ $DEBUG == true ]]; then echo "Getting region data"; fi
  . "$_GET_REGION" || exit 10
  if [[ $DEBUG == true ]]; then echo "Getting token"; fi
  . "$_GET_TOKEN" || exit 10
  if [[ $DEBUG == true ]]; then echo "Connecting to Wireguard"; fi
  . "$_CONNECT_SCRIPT" || exit 10
  # ---- CONNECTING CODE: END ---- #

  # Check and wait for new IP
  echo "Connected! Checking for new IP address...."
  count=1 # Doesn't let the while loop run forever
  while [[ $ip_vpn == "$ip_public" ]] && (( count <= _MAX_WAIT )); do
    sleep "$_WAIT_SECONDS" # Wait before checking for new IP
    ip_vpn=$(get_ip true) # Get IP after VPN
    if [[ $DEBUG == true ]]; then printf "%d check for new IP\n" "$count"; fi
    (( count++ ))
  done

  if [[ $ip_vpn == "$ip_public" ]]; then
    echo "You're IP hasn't changed after $((_MAX_WAIT * SEC)) seconds. Disconnecting VPN..."
    vpn_stop
    exit
  fi
  echo "Your new public IP is $ip_vpn"

  if [[ $PIA_PF == true ]]; then
    if [[ $DEBUG == true ]]; then echo "Starting port forwarding"; fi
    $_PORT_SCRIPT || exit 10
    # Starts Transmission if port forwarding is enabled
    $_TRANSMISSION_START_SCRIPT || exit 10
  fi
}

# Retrieves the Public IP
function get_ip() {
  local namespace=$1
  if [[ -n $namespace ]]; then
    ip netns exec "$NETNS_NAME" dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'\"' '{ print $2}'
  else
    dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'\"' '{ print $2}'
  fi
}

############### CHECKS ###############
check_tool jq jq
check_tool dig dig
check_tool socat socat

############### VARIABLES ###############
DEBUG=false
readonly _ORG_ARG=( "$@" )
readonly _WAIT_SECONDS=1 # seconds to wait before checking for updated IP
readonly _MAX_WAIT=12 # It'll wait for SEC times this value, i.e. SEC=5 _MAX_WAIT=12, will wait for 1 minute
readonly _GEOIP=/home/felipe/.config/geoip/database/GeoLite2-City.mmdb # database for status info
readonly CONFIG_DIR=/home/felipe/.config/pia_vpn
readonly AUTH_FILE=$CONFIG_DIR/passwd # PIA username and password
readonly CERT=$CONFIG_DIR/ca.rsa.4096.crt
readonly NETNS_NAME=piaVPN # name of the namespace
readonly WG_LINK=piaWg
export CONFIG_DIR
export AUTH_FILE
export CERT
export NETNS_NAME
export WG_LINK

# Necessary scripts
readonly SCRIPTS_DIR=/home/felipe/workspace/pia-vpn-transmission
readonly _GET_REGION=$SCRIPTS_DIR/get_region.sh
readonly _GET_TOKEN=$SCRIPTS_DIR/get_token.sh
readonly _CONNECT_SCRIPT=$SCRIPTS_DIR/connect_to_wg.sh
readonly _PORT_SCRIPT=$SCRIPTS_DIR/port_forwarding.sh
readonly _BIND_SCRIPT=$SCRIPTS_DIR/bind_port.sh
readonly _TRANSMISSION_START_SCRIPT=$SCRIPTS_DIR/start_transmission.sh
readonly _TRANSMISSION_STOP_SCRIPT=$SCRIPTS_DIR/stop_transmission.sh
readonly _MMDBINSPECT=/home/felipe/go/bin/mmdbinspect
export SCRIPTS_DIR

# Default to always forward port unless option to not do so was passed
if [[ $PIA_PF != "false" ]]; then PIA_PF="true"; fi
export PIA_PF

############### SCRIPT OPTIONS ###############
# Analyze script options
while (( "$#" )); do
  case "$1" in
    -h|--help) print_help; exit;;
    -v) DEBUG=true; shift;;
    -n) PIA_PF="false"; shift;;
    -*) # unsupported flags
      printf "\e[31m%s%s\e[0m\n" "Error: Unsupported flag " "$1"
      print_help; exit 1;;
    *) # preserve positional arguments
      params+=("$1"); shift;;
  esac
done
readonly DEBUG
export DEBUG

# Check the script is running as root
[ ${EUID:-$(id -u)} -eq 0 ] || exec sudo -E "$(readlink -f "$0")" "${_ORG_ARG[@]}"

# Checks for correct amount of parameters and assigns them
if (( ${#params[@]} > 2 )); then printf "\e[31m%s\e[0m\n" "A max of two parameters can be passed"; exit 1; fi
readonly options=${params[0]}
readonly server=${params[1]}

if [[ $DEBUG == true ]]; then
  echo "OPTIONS: $options"
  echo "SERVER: $server"
fi

# Assigns the correct server ID
case $server in
  van | "") SERVER_ID="ca_vancouver";;
  ont) SERVER_ID="ca_ontario";;
  mtl) SERVER_ID="ca";;
  tor) SERVER_ID="ca_toronto";;
  ber) SERVER_ID="ca_toronto";;
  frk) SERVER_ID="de-frankfurt";;
  fra) SERVER_ID="france";;
  sea) SERVER_ID="us_seattle";;
  *) printf "\e[31m%s\e[0m\n" "Unrecognized server"; exit 1;;
esac
readonly SERVER_ID
export SERVER_ID

if [[ $DEBUG == true ]]; then echo "SERVER_ID: $SERVER_ID"; fi

###########################################
case $options in
  start)
    vpn_start
    ;;
  stop)
    vpn_stop
    ;;
  status | "")
    if ! ip -n "$NETNS_NAME" link show $WG_LINK > /dev/null 2>&1; then echo "VPN is disconnected"; exit; fi
    ip_vpn=$(get_ip true)
    location=$($_MMDBINSPECT -db $_GEOIP "$ip_vpn" | jq '.[].Records[].Record | .city.names.en + " "  + .subdivisions[].iso_code  + ", " + .country.names.en')
    echo "Connected to $location. Your public IP is $ip_vpn"
    ;;
  *)
    print_help
    ;;
esac
